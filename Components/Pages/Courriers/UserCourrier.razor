@using System.IO
@using System.Linq
@using Azure.Core
@using Azure.Identity;
@using Microsoft.Graph
@using Microsoft.Graph.Models;
@using Microsoft.Extensions.Configuration
@using Kms.Services
@rendermode InteractiveServer
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject IConfiguration Configuration
@inject GraphClientService graphClientService
@inject SharePointList sharePointList
@* @inject MailsRunService mailsRunService *@

<!-- Loading -->

    @if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        @* <div class="error">@ErrorMessage</div> *@
    <div>
        <Alert Color="AlertColor.Warning"><Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> Tentative de connexion  </Alert>
    </div>
    }
    else if (isLoading)
    {
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="d-flex justify-content-center">
            <div class="spinner-grow text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
    }
    else
    {
        <div class="container">

            <!-- Animated -->
            <div class="animated fadeIn">
                <!-- Widgets  -->
                <div class="row">
                    <div class="col-lg-3 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="stat-widget-five">
                                    <div class="stat-icon dib flat-color-1">
                                    <Icon Name="IconName.Inbox" Color="IconColor.Success" />
                                    </div>
                                    <div class="stat-content">
                                        <div class="text-left dib">
                                        <div class="stat-text"><span class="count"><a href="#" @onclick="@(() => courriersAfficher = "trt")">@mailsRun.Count()</a></span></div>
                                        <div class="stat-heading"><a href="#" @onclick="@(() => courriersAfficher = "trt")">Courrier à traiter</a></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-3 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="stat-widget-five">
                                    <div class="stat-icon dib flat-color-2">
                                    <Icon Name="IconName.EnvelopeArrowUp" Color="IconColor.Success" />
                                    </div>
                                    <div class="stat-content">
                                        <div class="text-left dib">
                                        <div class="stat-text"><span class="count"> <a href="#" @onclick="@(() => courriersAfficher = "send")">@mailsSend.Count()</a></span></div>
                                        <div class="stat-heading"><a href="#" @onclick="@(() => courriersAfficher = "send")">Courriers affectés</a></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-3 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="stat-widget-five">
                                    <div class="stat-icon dib flat-color-3">
                                    <Icon Name="IconName.Fingerprint" Color="IconColor.Success" />
                                    </div>
                                    <div class="stat-content">
                                        <div class="text-left dib">
                                        <div class="stat-text"><span class="count"><a href="#" @onclick="@(() => courriersAfficher = "sgn")">@mailsToSign.Count()</a></span></div>
                                        <div class="stat-heading"><a href="#" @onclick="@(() => courriersAfficher = "sgn")">Courriers à signer</a></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-3 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="stat-widget-five">
                                    <div class="stat-icon dib flat-color-4">
                                        <i class="pe-7s-users"></i>
                                    </div>
                                    <div class="stat-content">
                                        <div class="text-left dib">
                                            <div class="stat-text"><span class="count">2986</span></div>
                                            <div class="stat-heading">Clients</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- /Widgets -->
            </div>
            <!-- .animated -->
            <div class="row">
            <!-- Courriers Cards -->
            @if (courriersAfficher == "trt")
            {
             
                <!-- Afficher la liste des courriers à traiter -->
                <div class="card border-success mb-3" style="max-width: 35rem;">
                    <div class="card-header bg-transparent border-success h5">Courriers à traiter</div>
                    <div class="card-body">
                        @foreach (var mailRun in mailsRun)
                        {
                            <ul class="list-unstyled">
                                <li>
                                    @if (mailRun.Fields?.AdditionalData["Title"] != null)
                                    {
                                        <a href="@($"/details/{mailRun.Id}")">@mailRun.Fields?.AdditionalData["Title"]</a>
                                    }
                                    else
                                    {
                                        <span>Vous n'avez pas de courrier à traiter!</span>
                                    }
                                </li>
                            </ul>
                        }
                    </div>

                </div>
            }
            else if (courriersAfficher == "send")
            {
                <!-- Afficher la liste des courriers affectés -->
                <div class="card border-success mb-3" style="max-width: 30rem;">
                    <div class="card-header bg-transparent border-success h5">Courriers à traiter</div>
                    <div class="card-body">
                        @foreach (var mailSend in mailsSend)
                        {
                            <ul class="list-unstyled">
                                <li>
                                    @if (mailSend.Fields?.AdditionalData["Title"] != null)
                                    {
                                        <a href="@($"/details/{mailSend.Id}")">@mailSend.Fields?.AdditionalData["Title"]</a>
                                    }
                                    else
                                    {
                                        <span>Vous n'avez pas de courrier à traiter!</span>
                                    }
                                </li>
                            </ul>
                        }
                    </div>

            </div>
        }
        else
        {
            <!-- Afficher la liste des courriers affectés -->
            <div class="card border-success mb-3" style="max-width: 30rem;">
                <div class="card-header bg-transparent border-success h5">Courriers à traiter</div>
                <div class="card-body">
                    @foreach (var mailToSign in mailsToSign)
                    {
                        <ul class="list-unstyled">
                            <li>
                                @if (mailToSign.Fields?.AdditionalData["Title"] != null)
                                {
                                    <a href="@($"/details/{mailToSign.Id}")">@mailToSign.Fields?.AdditionalData["Title"]</a>
                                }
                                else
                                {
                                    <span>Vous n'avez pas de courrier à traiter!</span>
                                }
                            </li>
                        </ul>
                    }
                </div>

                </div>

            }

            <!-- Courriers Cards -->
            <!-- Courriers Importés Cards -->
            <div class="col">
                <div class="card border-success mb-3">
                    <div class="card-header bg-transparent border-success h5">Courriers Importés</div>
                    <div class="card-body">
                        <ImportMails></ImportMails>
                    </div>
                </div>
            </div>
            </div>
            
        </div>
        
    }




@code {
    private bool isLoading = true;
    private IList<ListItem> mails = new List<ListItem>();//l'objet qui contiendras la liste renvoyé par l'API
    private List<ListItem> courriers = new List<ListItem>();//l'objet qui contiendra la liste des courriers par user connecté
    private List<ListItem> mailsRun = new List<ListItem>();//l'objet qui contiendra la liste des courriers à traiter
    private List<ListItem> mailsSend = new List<ListItem>();//l'objet qui contiendra la liste des courriers envoyé en signature
    private List<ListItem> mailsToSign = new List<ListItem>();//l'objet qui contiendra la liste des courriers à signer


    private readonly string _scope = "Sites.ReadWrite.All";//la permission necéssaire pour la requête
    private string ErrorMessage { get; set; }//le message d'erreur (facultatif)
    private string courriersAfficher = "trt"; // TRT représente le premier bouton par défaut

    private void SelectedCourrier(string courriersAfficher)
    {
        this.courriersAfficher = courriersAfficher;
    }

    //Quand la page s'initialise
    protected override async Task OnInitializedAsync()
    {

        if (await graphClientService.HasPermission(_scope))//Vérifie si l'utilisateur à l'autorisation requis pour le scope
        {
            await ShowList();//Si oui, afficher la liste
        }
        else
        {
            ErrorMessage = "Permission refusée";

        }
    }

    protected async Task ShowList()
    {
        isLoading = true;

        try{
            var tokenCredential = await graphClientService.GetOnBehalfOfCredential();//obtenir un token d'authentification
            var graph = graphClientService.GetGraphServiceClient(_scope, tokenCredential);//Créer un client graph qui utilise le token précedent


            //la requête pour récupérer une liste d'élements depuis un site sharepoint
            var items = await graph.Sites[sharePointList.SiteId].Lists[sharePointList.ListId].Items.GetAsync((config) =>
            {
                config.QueryParameters.Expand = new[] { "fields" };
            });
            //Affectation de la liste de tout les courriers dans la variable mails.
            mails = items?.Value ?? new List<ListItem>();

            //Requête de récupération des informations de l'utilisateur connecté à Teams:
            var user = await graph.Me.GetAsync((requestConfiguration) =>
                {
                    requestConfiguration.QueryParameters.Select = new string[] { "displayName" };
                });
            //Affectation du nom de l'utilisateur à la variable filter
            string filterUser = user.DisplayName;
            var filterIterms = (from mail in mails
                                where mail.Fields.AdditionalData["processor"].ToString() == filterUser
                                select mail);

            courriers = filterIterms.ToList();

            // Requête de comptage des courriers à traiter:
            var mailRun = (from filterItem in filterIterms
                           where filterItem.Fields.AdditionalData["statutMail"].ToString() == "TRT" ||
                           filterItem.Fields.AdditionalData["statutMail"].ToString() == "REC" ||
                           filterItem.Fields.AdditionalData["statutMail"].ToString() == "VLD" ||
                           filterItem.Fields.AdditionalData["statutMail"].ToString() == "DAV"
                           select filterItem);
            mailsRun = mailRun.ToList();

            // Requête de comptage des courriers envoyés en signature:
            var mailSend = (from filterItem in filterIterms
                            where filterItem.Fields.AdditionalData["statutMail"].ToString() == "SGN"
                            select filterItem);
            mailsSend = mailSend.ToList();

            // Requête de comptage des courriers à signer:

            var mailToSign = (from mail in mails
                              where mail.Fields.AdditionalData.ContainsKey("signatory") && mail.Fields.AdditionalData["signatory"].ToString() == filterUser
                              && mail.Fields.AdditionalData["statutMail"].ToString() == "SGN"
                              select mail);

            mailsToSign = mailToSign.ToList();

            isLoading = false;
        }
        catch(Exception e)
        {
            ErrorMessage = e.Message;   
        }

        
    }

    

}
