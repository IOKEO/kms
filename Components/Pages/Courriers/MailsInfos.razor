@using System.IO
@using System.Linq
@using Azure.Core
@using Azure.Identity;
@using Microsoft.Graph
@using Microsoft.Graph.Models;
@using Microsoft.Extensions.Configuration
@using Kms.Services
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject IConfiguration Configuration
@inject GraphClientService graphClientService
@inject SharePointList sharePointList
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@page "/mailsinfos/{status}"

<div class="card border-success mb-3">
    <div class="card-header bg-transparent border-success h5">Les courriers</div>
    <div class="card-body">
        @foreach (var mailRun in mailsRun)
        {
            <ul class="list-unstyled">
                <li>
                    @if (mailRun.Fields?.AdditionalData["Title"] != null)
                    {
                        <a href="@($"/details/{mailRun.Id}")">@mailRun.Fields?.AdditionalData["Title"]</a>
                    }
                    else
                    {
                        <span>Vous n'avez pas de courrier à traiter!</span>
                    }
                </li>
            </ul>
        }
    </div>

</div>

@code {
    [Parameter]
    public string status { get; set; }
    private IList<ListItem> mails = new List<ListItem>();//l'objet qui contiendras la liste renvoyé par l'API
    private List<ListItem> mailsRun = new List<ListItem>();//l'objet qui contiendra la liste des courriers à traiter
    private List<ListItem> courriers = new List<ListItem>();//l'objet qui contiendra la liste des courriers par user connecté
    private readonly string _scope = "Sites.ReadWrite.All";//la permission necéssaire pour la requête
    private string ErrorMessage { get; set; }//le message d'erreur (facultatif)

    //Quand la page s'initialise
    protected override async Task OnInitializedAsync()
    {

        if (await graphClientService.HasPermission(_scope))//Vérifie si l'utilisateur à l'autorisation requis pour le scope
        {
            await ShowList();//Si oui, afficher la liste
        }
        else
        {
            ErrorMessage = "Permission refusée";
        }
    }

    protected async Task ShowList()
    {

        var tokenCredential = await graphClientService.GetOnBehalfOfCredential();//obtenir un token d'authentification
        var graph = graphClientService.GetGraphServiceClient(_scope, tokenCredential);//Créer un client graph qui utilise le token précedent


        //la requête pour récupérer une liste d'élements depuis un site sharepoint
        var items = await graph.Sites[sharePointList.SiteId].Lists[sharePointList.ListId].Items.GetAsync((config) =>
        {
            config.QueryParameters.Expand = new[] { "fields" };
        });
        //Affectation de la liste de tout les courriers dans la variable mails.
        mails = items?.Value ?? new List<ListItem>();

        //Requête de récupération des informations de l'utilisateur connecté à Teams:
        var user = await graph.Me.GetAsync((requestConfiguration) =>
            {
                requestConfiguration.QueryParameters.Select = new string[] { "displayName" };
            });
        //Affectation du nom de l'utilisateur à la variable filter
        string filterUser = user.DisplayName;
        var filterIterms = (from mail in mails
                            where mail.Fields.AdditionalData["processor"].ToString() == filterUser
                            select mail);

        courriers = filterIterms.ToList();



        if(status== "trt")
        {
            // Requête de comptage des courriers à traiter:
            var mailRun = (from filterItem in filterIterms
                           where filterItem.Fields.AdditionalData["statutMail"].ToString() == "TRT" ||
                           filterItem.Fields.AdditionalData["statutMail"].ToString() == "REC"
                           select filterItem);
            mailsRun = mailRun.ToList();
        }
        else if(status == "sgn")
        {
            // Requête de comptage des courriers à traiter:
            var mailRun = (from filterItem in filterIterms
                           where filterItem.Fields.AdditionalData.ContainsKey("signatory") && filterItem.Fields.AdditionalData["signatory"].ToString() == filterUser
                           select filterItem);
            mailsRun = mailRun.ToList();
        }
        else if(status == "send")
        {
            var mailRun = (from filterItem in filterIterms
                           where filterItem.Fields.AdditionalData["statutMail"].ToString() == "SGN"
                           select filterItem);
            mailsRun = mailRun.ToList();
        }
    }
}
